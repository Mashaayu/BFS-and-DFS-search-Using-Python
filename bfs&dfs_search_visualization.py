# -*- coding: utf-8 -*-
"""BFS&DFS search Visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P3juKHFwayb_ltjrbVRHR1nzsTG4Ffkm
"""

import queue
import networkx as nx
import matplotlib.pyplot as plt
import time

def order_bfs(graph, start_node):
    visited = set()
    q = queue.Queue()
    q.put(start_node)
    order = []

    while not q.empty():
        vertex = q.get()
        if vertex not in visited:
            order.append(vertex)
            visited.add(vertex)  # Mark the node as visited

            for node in graph[vertex]:
                if node not in visited:
                    q.put(node)

    return order

def order_dfs(graph, start_node, visited=None):
    if visited is None:
        visited = set()

    order = []

    if start_node not in visited:
        order.append(start_node)
        visited.add(start_node)

        for node in graph[start_node]:
            if node not in visited:
                order.extend(order_dfs(graph, node, visited))
    return order

def visualize_search(order, title, graph, pos):
    plt.figure()
    plt.title(title)
    for i, node in enumerate(order, start=1):
        plt.clf()  # Clear the plot
        plt.title(title)
        nx.draw(graph, pos, with_labels=True, node_color=['r' if n == node else 'b' for n in graph.nodes])
        plt.draw()
        plt.pause(1.5)
    plt.show(block=False)
    time.sleep(0.5)

G = nx.Graph()
G.add_edges_from([('A', 'B'), ('A', 'C'), ('B', 'D'), ('B', 'E'), ('C', 'F'), ('C', 'G')])
pos = nx.spring_layout(G)

# BFS Visualization
bfs_order = order_bfs(G, start_node='A')
visualize_search(bfs_order, title='BFS Visualization', graph=G, pos=pos)
plt.show()

# DFS Visualization
dfs_order = order_dfs(G, start_node='A')
visualize_search(dfs_order, title='DFS Visualization', graph=G, pos=pos)
plt.show()